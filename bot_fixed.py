import logging
import os
import json
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

import gspread
from google.oauth2.service_account import Credentials

# -------------------- CONFIG --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# -------------------- GOOGLE SHEETS --------------------
credentials_json = os.getenv("GOOGLE_CREDENTIALS")
if not credentials_json:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

info = json.loads(credentials_json)
creds = Credentials.from_service_account_info(info, scopes=[
    "https://www.googleapis.com/auth/spreadsheets"
])

gc = gspread.authorize(creds)
sh = gc.open_by_key(SPREADSHEET_ID)
worksheet = sh.sheet1

# -------------------- TELEGRAM --------------------
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
RESTAURANTS = [
    "BarbarescoüáÆüáπ",
    "Brut is goodüçæ",
    "–ë—É—Ñ–µ—Ç –Ω–∞ –ë–æ–ª—å—à–æ–πüêà",
    "Unitedüç∫",
    "Good Companyü¶ä",
    "Brut Leeü¶™"
]

# –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_restaurant = {}

# --- –º–µ–Ω—é —Å—Ç–∞—Ä—Ç–∞ ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in RESTAURANTS:
        kb.add(KeyboardButton(r))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=kb)

# --- –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ---
@dp.message_handler(lambda msg: msg.text in RESTAURANTS)
async def choose_restaurant(message: types.Message):
    user_restaurant[message.from_user.id] = message.text
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏/–∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.")

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ ---
@dp.message_handler(content_types=['text', 'photo'])
async def handle_review(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_restaurant:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω —á–µ—Ä–µ–∑ /start")
        return

    restaurant = user_restaurant[user_id]
    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Üí –±–µ—Ä—ë–º caption, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    text_review = message.caption if message.caption else (message.text if message.text else "")
    date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    image_formula = ""
    download_link = ""

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
    if message.photo:
        try:
            file_id = message.photo[-1].file_id
            file_info = await bot.get_file(file_id)
            file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"

            # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä—è–º–æ –≤ —è—á–µ–π–∫–µ
            image_formula = f'=IMAGE("{file_url}")'
            # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å"
            download_link = f'=HYPERLINK("{file_url}";"–°–∫–∞—á–∞—Ç—å")'

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # --- –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ---
    try:
        next_row = len(worksheet.get_all_values()) + 1
        worksheet.update(
            f"A{next_row}:E{next_row}",
            [[date_str, restaurant, text_review, image_formula, download_link]],
            value_input_option="USER_ENTERED"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # --- –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º!\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ /start"
    )

# -------------------- MAIN --------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
